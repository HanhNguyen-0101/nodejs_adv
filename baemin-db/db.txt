DROP DATABASE IF EXISTS baemin_db CREATE DATABASE baemin_db;

-- User table for login information
CREATE TABLE users (
  user_id SERIAL PRIMARY KEY,
  username VARCHAR(255) UNIQUE NOT NULL,
  password_hash VARCHAR(255) NOT NULL,
  email VARCHAR(255) UNIQUE NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Shops table
CREATE TABLE shops (
  shop_id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  address VARCHAR(255),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Category table
CREATE TABLE categories (
  category_id SERIAL PRIMARY KEY,
  name VARCHAR(255) UNIQUE NOT NULL,
  description TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Product table
CREATE TABLE products (
  product_id SERIAL PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  price DECIMAL(10, 2) NOT NULL,
  quantity INT NOT NULL CHECK (quantity >= 0), -- Quantity with a constraint to prevent negative values
  category_id INT REFERENCES categories(category_id),
  shop_id INT REFERENCES shops(shop_id), -- Reference to shops table
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Order table
CREATE TABLE orders (
  order_id SERIAL PRIMARY KEY,
  user_id INT REFERENCES users(user_id),
  order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  total DECIMAL(10, 2) NOT NULL
);

-- Order items table for many-to-many relationship between orders and products
CREATE TABLE order_items (
  order_item_id SERIAL PRIMARY KEY,
  order_id INT REFERENCES orders(order_id),
  product_id INT REFERENCES products(product_id),
  quantity INT NOT NULL,
  price DECIMAL(10, 2) NOT NULL
);

-- Shipping table
CREATE TABLE shipping (
  shipping_id SERIAL PRIMARY KEY,
  order_id INT REFERENCES orders(order_id),
  address VARCHAR(255) NOT NULL,
  city VARCHAR(255) NOT NULL,
  state VARCHAR(255),
  postal_code VARCHAR(20),
  country VARCHAR(255) NOT NULL,
  shipped_date TIMESTAMP,
  shipping_method VARCHAR(255) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

--Insert data
INSERT INTO users (username, password_hash, email, created_at) VALUES
('john_doe', 'hashed_password1', 'john.doe@example.com', NOW()),
('jane_doe', 'hashed_password2', 'jane.doe@example.com', NOW()),
('alice', 'hashed_password3', 'alice@example.com', NOW()),
('bob', 'hashed_password4', 'bob@example.com', NOW()),
('charlie', 'hashed_password5', 'charlie@example.com', NOW());


INSERT INTO shops (name, address, created_at) VALUES
('Pizza Place', '123 Pizza St, Food City', NOW()),
('Sushi Shop', '456 Sushi Ave, Food Town', NOW()),
('Burger Joint', '789 Burger Blvd, Foodville', NOW()),
('Taco Truck', '101 Taco Ln, Foodland', NOW()),
('Pasta Palace', '202 Pasta Rd, Foodburg', NOW());


INSERT INTO categories (name, description, created_at) VALUES
('Pizza', 'Delicious pizza of various kinds', NOW()),
('Sushi', 'Fresh and tasty sushi', NOW()),
('Burgers', 'Juicy and flavorful burgers', NOW()),
('Tacos', 'Spicy and crunchy tacos', NOW()),
('Pasta', 'Rich and creamy pasta dishes', NOW());


INSERT INTO products (name, description, price, quantity, category_id, shop_id, created_at) VALUES
('Margherita Pizza', 'Classic margherita pizza', 8.99, 100, 1, 1, NOW()),
('Pepperoni Pizza', 'Spicy pepperoni pizza', 9.99, 100, 1, 1, NOW()),
('California Roll', 'Fresh California roll', 6.99, 100, 2, 2, NOW()),
('Spicy Tuna Roll', 'Spicy tuna roll', 7.99, 100, 2, 2, NOW()),
('Cheeseburger', 'Classic cheeseburger', 5.99, 100, 3, 3, NOW()),
('Double Bacon Burger', 'Double burger with bacon', 7.99, 100, 3, 3, NOW()),
('Chicken Taco', 'Grilled chicken taco', 3.99, 100, 4, 4, NOW()),
('Beef Taco', 'Spicy beef taco', 4.99, 100, 4, 4, NOW()),
('Carbonara', 'Creamy carbonara pasta', 10.99, 100, 5, 5, NOW()),
('Bolognese', 'Rich bolognese pasta', 11.99, 100, 5, 5, NOW());


INSERT INTO orders (user_id, order_date, total) VALUES
(1, NOW(), 18.98),
(2, NOW(), 14.98),
(3, NOW(), 13.98),
(4, NOW(), 10.98),
(5, NOW(), 12.99);


INSERT INTO order_items (order_id, product_id, quantity, price) VALUES
(1, 1, 2, 8.99),
(1, 2, 1, 9.99),
(2, 3, 2, 6.99),
(2, 4, 1, 7.99),
(3, 5, 2, 5.99),
(3, 6, 1, 7.99),
(4, 7, 2, 3.99),
(4, 8, 1, 4.99),
(5, 9, 1, 10.99),
(5, 10, 1, 11.99);


INSERT INTO shipping (order_id, address, city, state, postal_code, country, shipped_date, shipping_method, created_at) VALUES
(1, '123 Customer St', 'Customer City', 'State', '12345', 'Country', NOW(), 'Standard', NOW()),
(2, '456 Buyer Ave', 'Buyer Town', 'State', '67890', 'Country', NOW(), 'Express', NOW()),
(3, '789 Shopper Blvd', 'Shopperville', 'State', '10112', 'Country', NOW(), 'Standard', NOW()),
(4, '101 Consumer Ln', 'Consumerland', 'State', '13141', 'Country', NOW(), 'Standard', NOW()),
(5, '202 Purchaser Rd', 'Purchaserville', 'State', '15161', 'Country', NOW(), 'Express', NOW());


-- query simple
select * from products ORDER BY price DESC;
select * from users;
select * from shops;